# Some parts are Copyright (C) Diederik Noordhuis (@AntiEngineer) 2019
# All licensed under project license

#    Friendly Telegram (telegram userbot)
#    Copyright (C) 2018-2019 The Authors

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.

#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

# The API is not yet public. To get a key, go to https://t.me/Intellivoid then ask Qián Zhào.

import coffeehouse as cf

import asyncio
import io
from sql_helpers.lydia_ai_sql import get_s, get_all_s, add_s, remove_s
from time import time
from uniborg.util import admin_cmd


logger = logging.getLogger(__name__)

@borg.on(admin_cmd(incoming=True))
async def register(cb):
    cb(LydiaMod())


class LydiaMod(loader.Module):
    """Talks to a robot instead of a human"""
    
@borg.on(admin_cmd(incoming=True))
async def __init__(self):
        self.config = loader.ModuleConfig("CLIENT_KEY", "", _("The API key for lydia, acquire from @IntellivoidDev"),
                                          "IGNORE_NO_COMMON", False, _("Boolean to ignore users who have no chats "
                                                                       + "in common with you"))
        self.name = _("Lydia anti-PM")
        self._ratelimit = []
        self._cleanup = None
        
@borg.on(admin_cmd(incoming=True))
async def client_ready(self, client, db):
        self._db = db
        self._lydia = coffeehouse.API(self.config["CLIENT_KEY"])
        self._me = await client.get_me()
        # Schedule cleanups
        self._cleanup = asyncio.ensure_future(self.schedule_cleanups())
        
